% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildsteps.R
\name{cr_buildstep}
\alias{cr_buildstep}
\title{Create a yaml build step}
\usage{
cr_buildstep(name, args, id = NULL, prefix = "gcr.io/cloud-builders/",
  entrypoint = NULL, dir = "", env = NULL)
}
\arguments{
\item{name}{name of docker image to call appended to \code{prefix}}

\item{args}{character vector of arguments}

\item{id}{Optional id for the step}

\item{prefix}{prefixed to name - set to "" to suppress.  Will be suppressed if \code{name} starts with gcr.io}

\item{entrypoint}{change the entrypoint for the docker container}

\item{dir}{The directory to use, relative to /workspace e.g. /workspace/deploy/}

\item{env}{Environment variables for this step.  A character vector for each assignment}
}
\description{
Helper for creating build steps for upload to Cloud Build
}
\details{
By default dir is set to \code{deploy} to aid deployment from GCS, but you may want to set this to \code{""} when using \link{RepoSource}
}
\section{Build Macros}{

Fields can include the following variables, which will be expanded when the build is created:-

\itemize{
  \item $PROJECT_ID: the project ID of the build.
  \item $BUILD_ID: the autogenerated ID of the build.
  \item $REPO_NAME: the source repository name specified by RepoSource.
  \item $BRANCH_NAME: the branch name specified by RepoSource.
  \item $TAG_NAME: the tag name specified by RepoSource.
  \item $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or  resolved from the specified branch or tag.
  \item  $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
}

Or you can add your own custom variables, set in the Build Trigger.  Custom variables always start with $_ e.g. $_MY_VAR
}

\examples{

# creating yaml for use in deploying cloud run
image = "gcr.io/my-project/my-image:$BUILD_ID"
Yaml(
    steps = c(
         cr_buildstep("docker", c("build","-t",image,".")),
         cr_buildstep("docker", c("push",image)),
         cr_buildstep("gcloud", c("beta","run","deploy", "test1",
                                   "--image", image))),
    images = image)

# use premade docker buildstep - combine using c()
image = "gcr.io/my-project/my-image"
Yaml(
    steps = c(cr_buildstep_docker(image),
              cr_buildstep("gcloud",
                     args = c("beta","run","deploy",
                              "test1","--image", image))
             ),
    images = image)

# list files with a new entrypoint for gcloud
Yaml(steps = cr_buildstep("gcloud", c("-c","ls -la"), entrypoint = "bash"))

# to call from images not using gcr.io/cloud-builders stem
cr_buildstep("alpine", c("-c","ls -la"), entrypoint = "bash", prefix="")

# to add environment arguments to the step
cr_buildstep("docker", "version", env = c("ENV1=env1", "ENV2=$PROJECT_ID"))

}
\seealso{
Other Cloud Build functions, yaml functions: \code{\link{Yaml}},
  \code{\link{cr_build_write}}
}
\concept{Cloud Build functions, yaml functions}
