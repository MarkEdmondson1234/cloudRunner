% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloudbuild_schedule.R
\name{cr_schedule_pubsub}
\alias{cr_schedule_pubsub}
\title{Create a PubSub Target object for Cloud Scheduler}
\usage{
cr_schedule_pubsub(
  topicName,
  data = NULL,
  attributes = NULL,
  projectId = cr_project_get()
)
}
\arguments{
\item{topicName}{The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered.}

\item{data}{The message payload for PubsubMessage. An R object that will be turned into JSON via [jsonlite] and then base64 encoded into the PubSub format.}

\item{attributes}{Attributes for PubsubMessage.}

\item{projectId}{The projectId for where the topic sits}
}
\description{
Create a PubSub Target object for Cloud Scheduler
}
\examples{
cr_project_set("my-project")
cr_bucket_set("my-bucket")
cloudbuild <- system.file("cloudbuild/cloudbuild.yaml",
                           package = "googleCloudRunner")
bb <- cr_build_make(cloudbuild)

\dontrun{
# create a pubsub topic either in Google Console webUI or library(googlePubSubR)
library(googlePubsubR)
pubsub_auth()
topics_create("test-topic")
}

# create build trigger that will watch for messages to your created topic
pubsub_trigger <- cr_buildtrigger_pubsub("test-topic")
pubsub_trigger

\dontrun{
# create the build trigger with in-line build
cr_buildtrigger(bb, name = "pubsub-triggered", trigger = pubsub_trigger)


# create scheduler that calls the pub/sub topic
cr_schedule("cloud-build-pubsub",
            "15 5 * * *",
            pubsubTarget = cr_schedule_pubsub("test-topic"))

}


}
\seealso{
Other Cloud Scheduler functions: 
\code{\link{HttpTarget}()},
\code{\link{Job}()},
\code{\link{PubsubTarget}()},
\code{\link{cr_build_schedule_http}()},
\code{\link{cr_run_schedule_http}()},
\code{\link{cr_schedule_delete}()},
\code{\link{cr_schedule_get}()},
\code{\link{cr_schedule_list}()},
\code{\link{cr_schedule_pause}()},
\code{\link{cr_schedule_run}()},
\code{\link{cr_schedule}()}
}
\concept{Cloud Scheduler functions}
