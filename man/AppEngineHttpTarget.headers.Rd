% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/objs_schedule.R
\name{AppEngineHttpTarget.headers}
\alias{AppEngineHttpTarget.headers}
\title{AppEngineHttpTarget.headers Object}
\usage{
AppEngineHttpTarget.headers()
}
\value{
AppEngineHttpTarget.headers object
}
\description{
AppEngineHttpTarget.headers Object
}
\details{
Autogenerated via \code{\link[googleAuthR]{gar_create_api_objects}}
HTTP request headers.This map contains the header field names and values. Headers can be setwhen the job is created.Cloud Scheduler sets some headers to default values:* `User-Agent`: By default, this header is  `'AppEngine-Google; (+http://code.google.com/appengine)'`.  This header can be modified, but Cloud Scheduler will append  `'AppEngine-Google; (+http://code.google.com/appengine)'` to the  modified `User-Agent`.* `X-CloudScheduler`: This header will be set to true.If the job has an body, Cloud Scheduler setsthe following headers:* `Content-Type`: By default, the `Content-Type` header is set to  `'application/octet-stream'`. The default can be overridden by explictly  setting `Content-Type` to a particular media type when the job is  created.  For example, `Content-Type` can be set to `'application/json'`.* `Content-Length`: This is computed by Cloud Scheduler. This value is  output only. It cannot be changed.The headers below are output only. They cannot be set or overridden:* `X-Google-*`: For Google internal use only.* `X-AppEngine-*`: For Google internal use only.In addition, some App Engine headers, which containjob-specific information, are also be sent to the job handler.
}
\seealso{
Other AppEngineHttpTarget functions: \code{\link{AppEngineHttpTarget}}
}
\concept{AppEngineHttpTarget functions}
